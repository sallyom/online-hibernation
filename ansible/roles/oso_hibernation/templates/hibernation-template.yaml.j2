apiVersion: v1
kind: Template
metadata:
  name: "hibernation"

parameters:

- name: NAME
  description: The name of the DeploymentConfig.
  value: hibernation
- name: GIT_REPO
  description: Git repository housing the Dockerfile and code to build and deploy.
  value: "https://github.com/openshift/online-hibernation.git"
- name: GIT_REF
  description: Git branch, commit, or tag to deploy.
  value: "master"
- name: QUOTA_HOURS
  description: Maximum quota-hours allowed in period before force sleep
  value: "16h"
- name: TERMINATING_QUOTA
  description: Quota for terminating pods
  value: "1Gi"
- name: NONTERMINATING_QUOTA
  description: Quota for nonterminating pods
  value: "1Gi"
- name: PERIOD
  description: Length of period in hours for quota consumption
  value: "24h"
- name: SLEEP_SYNC_PERIOD
  description: Interval to sync project status
  value: "1h"
- name: PROJECT_SLEEP_LENGTH
  description: Length of time to apply force-sleep to projects over quota.
  value: "8h"
- name: EXCLUDE_NAMESPACES
  description: Comma-separated list of namespace to exclude in quota enforcement
  value: "{{ osoh_exclude_namespace }}"
- name: IDLE_SYNC_PERIOD
  description: Interval to sync project status for idler
  value: "30m"
- name: IDLE_QUERY_PERIOD
  description: Interval to query project network activity for idler
  value: "30m"
- name: IDLE_THRESHOLD
  description: Network activity received (bytes) or less that will result in idling.
  value: "40000"
- name: IDLE_DRYRUN
  description: Boolean for idler dry-run mode, where projects will be logged but not idled.
  value: "true"
- name: SLEEP_DRYRUN
  description: Boolean for sleeper dry-run mode, where projects will be logged but not modified.
  value: "true"
- name: IMAGE_PULL_POLICY
  description: The image pull policy (configurable to facilitate testing)
  value: IfNotPresent
- name: HIBERNATION_IMAGE
  description: The hibernation image
  value: hibernation
- name: PROMETHEUS_URL
  description: The url to access prometheus metrics
  value: "https://prometheus.openshift-devops-monitor.svc.cluster.local"
- name: LOG_LEVEL
  description: Verbosity level for glogging
  value: "2"
- name: METRICS_COLLECT_RUNTIME
  description: Enable runtime metrics
  value: "true"
- name: METRICS_COLLECT_CACHE
  description: Enable controller cache metrics
  value: "true"
- name: CPU_REQUEST
  description: CPU resource request
  value: "250m"
- name: CPU_LIMIT
  description: Memory resource request
  value: "2"
- name: MEMORY_REQUEST
  description: Memory resource request
  value: "1Gi"
- name: MEMORY_LIMIT
  description: Memory resource limit
  value: "2500Mi"

objects:

# A role for hibernation
- apiVersion: v1
  kind: ClusterRole
  metadata:
    annotations:
      authorization.openshift.io/system-only: "true"
    name: ${NAME}
  rules:
  - resources:
    - projects
    - namespaces
    - pods
    - replicationcontrollers
    - deploymentconfigs
    - resourcequotas
    - services
    - endpoints
    verbs:
    - watch
    - get
    - list
    - create
    - update
    - delete
  - apiGroups:
    - ""
    - apps.openshift.io
    resources:
    - deploymentconfigs
    verbs:
    - get
    - list
    - watch
    - update
  - apiGroups:
    - ""
    - apps
    resources:
    - deployments
    - daemonsets
    - statefulsets
    - replicasets
    verbs:
    - get
    - list
    - watch
    - update
  - apiGroups:
    - ""
    - extensions
    resources:
    - deployments
    - daemonsets
    - statefulsets
    - replicasets
    verbs:
    - get
    - list
    - watch
    - update

# A service account for use by hibernation
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: ${NAME}

# A service to expose the metrics server
- apiVersion: v1
  kind: Service
  metadata:
    name: ${NAME}
  spec:
    ports:
    - name: "metrics"
      protocol: TCP
      port: 8080
      targetPort: "metrics"

# Binds the service account to the hibernation role
- apiVersion: v1
  kind: ClusterRoleBinding
  metadata:
    name: ${NAME}
  roleRef:
    name: ${NAME}
  subjects:
  - kind: ServiceAccount
    name: ${NAME}
    namespace: openshift-infra

- apiVersion: v1
  kind: ImageStream
  metadata:
    name: ${NAME}
  spec:
  status:
    dockerImageRepository:

- kind: BuildConfig
  apiVersion: v1
  metadata:
    name: ${NAME}
  spec:
    source:
      git:
        uri: ${GIT_REPO}
        ref: ${GIT_REF}
    strategy:
      dockerStrategy:
        from:
          kind: DockerImage
          name: golang:1.7
    output:
      to:
        kind: ImageStreamTag
        name: ${NAME}:latest
    triggers:
      - type: ConfigChange

# The hibernation application
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: ${NAME}
  spec:
    strategy:
      type: Recreate
    triggers:
      - type: ImageChange
        imageChangeParams:
          automatic: true
          containerNames:
            - ${NAME}
          from:
            kind: ImageStreamTag
            name: ${NAME}:latest
      - type: ConfigChange
    replicas: 1
    selector:
      name: ${NAME}
    template:
      metadata:
        labels:
          name: ${NAME}
      spec:
        serviceAccountName: ${NAME}
        containers:
        - name: ${NAME}
          image: ${HIBERNATION_IMAGE}
          imagePullPolicy: ${IMAGE_PULL_POLICY}
          ports:
          - name: "metrics"
            containerPort: 8080
            protocol: TCP
          resources:
            requests:
              memory: ${MEMORY_REQUEST}
              cpu: ${CPU_REQUEST}
            limits:
              memory: ${MEMORY_LIMIT}
              cpu: ${CPU_LIMIT}
          command:
          - /go/bin/hibernate
          - --quota=${QUOTA_HOURS}
          - --period=${PERIOD}
          - --sleep-sync-period=${SLEEP_SYNC_PERIOD}
          - --sleep-duration=${PROJECT_SLEEP_LENGTH}
          - --workers=10
          - --exclude-namespace=${EXCLUDE_NAMESPACES}
          - --terminating=${TERMINATING_QUOTA}
          - --nonterminating=${NONTERMINATING_QUOTA}
          - --idle-sync-period=${IDLE_SYNC_PERIOD}
          - --idle-query-period=${IDLE_QUERY_PERIOD}
          - --idle-dry-run=${IDLE_DRYRUN}
          - --sleep-dry-run=${SLEEP_DRYRUN}
          - --idle-threshold=${IDLE_THRESHOLD}
          - --prometheus-url=${PROMETHEUS_URL}
          - --v=${LOG_LEVEL}
          - --logtostderr
          - --collect-runtime=${METRICS_COLLECT_RUNTIME}
          - --collect-cache=${METRICS_COLLECT_CACHE}

